Core_Java
Advance_Java
J2EE
-------------------LEC-1--------------------------------------------------------------------------------------
1. J2SE/ Java SE --- Fundamentals of java require.--> OOPs, EH, Packages, MT, Collections, JDBC,
                     RMI(remote method invocation)


2. J2EE/ Java EE --- Server side development.. need EE.(Client server architecture).
    technologies
    1. Component based technologies.
        1.Web component based technologies
           1.Servlets, JSP, JSF, JSTL, Expression language.

        2.Distributed component base technologies.
            1.EJBs, CORBA, Web Services...

        3. XML component based technologies.
            1.JAX-P(java api for xml parsing), JAX-B(binding), JAX-RPC(remote procedure calls), ......

    2. Service Oriented technologies
       JNDI(java naming and directory interface), JTA(transaction api), JCA(connector), JAAS(authentication & authorize), JMS(messaging service).

    3. Protocol based technologies.
        1. Web services, RMI, OMG(object management), HttpServlet.


Lec2--------------------------------------------------------------------------------------------------------------
ADV Java Topics--------------------------------------------------------------->
Pre-req. for JDBC[core java]
  static input, dynamic input, command line input
    1.Dynamic input Approaches(runtime)----------------------->
        1.By using BufferedReader
          readLine()
          read()

        2.By using Scanner
           make object, call direct primitive like nextInt(), nextLine() etc.
        3.By using console
           Disadvantages of br and scanner
            --> two line of code for single scan.
                lengthy code
          
          Console c=System.console();
           package--> java.io;

           username in String, password in char array,


    2.Class.forName() and newInstance() methods.
    3.Static keyword
        will improve sharability in java application.
        We are able to utilize static keyword in four ways.
          1. Static variables.
Lec-3--------------------------------------------------------------------------------------------------------------         
            >While execution of programme, jvm load main class byte code to the memory.
            >static variables are recognized and initialized at the time of respctive class bytecode to the memory.
            
            >static var. are accesse by tho ways
              1. by using class name
              2. by using respective class reference variables.

            >static variables will provide single value to all the objects.
            >static variable never be local variables.

            >must be declared as class level variables.
            
            Suggestable is -----------> Access by class name



          2.Static methods// for jdbc
            >recognize and execute at the moment , when we access that method.
            >Access by class name or reference variable.
            >allow only static variables, will not allow non static members of current class.
            
            >Note-->If want to access non static var. in static method, create object and use.

            >this keyword not allowed in static method.

            >we can access static mothod by this keyword in non- static method.



          3.Static blocks// for jdbc
            static block is set of instructions, which are recognize and executed exactly at the time of loading the respective class bytecode to the memory.

            class HelloWorld {
                 static{
                        System.out.println("Static called");
                       }
    
                    public static void main(String[] args){
       
                     HelloWorld h=new HelloWorld();
        
                 }

                Static called at the time of class object execution(static block execute)

-----------------------LEC-4----------------------------------------------------------------------------------------
    4.FileOutput stream and fileinputStream
      Constructor---> Execute at the time of object creation.
                      class HelloWorld {
                             HelloWorld()
                                {
                                    System.out.println("Con Called...");
                                }
    
                            static{
                                      System.out.println("Static called");
                                  }
    
    
                            public static void main(String[] args){
       
                                 HelloWorld h=new HelloWorld();
                                    }
                                }

                    NOTE:--- Static called first then constructor called(if object created);

            Class s=forName.Class("Class name");
            
            This will find class name in three paths.
              1.current location
              2.Java pre-defined library
              3.reffered by classpath environment variable.

            If file is not available in these paths , JVM will throw exception.
            (java.lang.ClassNotfoundException)

            if found, jvm will take metadata(details of the class).
            then java.lang.class's object created.

            we can fetch class bytecode without object.

            Class s=forName.Class("Class name");//find class in three paths
            Object o=s.newInstance();// this will execute object of the class.

            If default constructor not available(parameterized constructor available) , it will throw error.
            Exception in thread "main" java.lang.InstantiationException:

            If default constructor is private-->java.base/jdk.internal.reflect.Reflection.newIllegalAccessException

            Note-> In java , only one acception show, then terminate, no scope of second exception.

        FileOutputstream and fileinputStream-------------------------------->
         Two type of streams available
          1.Byte oriented stream-->data in the form of byte or binary from input devices to java or java to o/p devices.
            
            types
              1.inputstream-->byte code from input devices to java programme only
              2.Outputstream->byte code from java programme to o/p devices.


          2.Character oriented stream
             able to allow data in th form of character.
             types:
              1. reader -->same as input stream
              2. Writer--> same as output stream

            if file end with stream , called as byte oriented stream.

            So, fileinputstream & fileoutputstream are byte oriented stream

            All character oriented streams are ended with reader or writer.
            ex. filereader, filewriter, bufferedreader.


Lec-5------------------------------------------------------------------------------------------------------>
        All streams in java are pre-defined classes.
        package--java.io package

        1.FileOutpurStream->
          To transfer data from java to perticular target file.
          FileOutputStream s=new FileOutputStream("Shubh.txt",true);  // ex. shubh.txt(path preffered)
           if file not found--->then jvm will automatically create file.

            ex.   String data="Hello";
            byte[] b=data.getBytes();
            Note--> because fileoutputstream get data in byte .


            class Practice {
                 public static void main(String args[]) throws Exception {

                     FileOutputStream s = new FileOutputStream("Shubham.txt",true);
                        String str = "Shubham Kumbhare";
                        byte[] b = str.getBytes();
                        System.out.println("Hello World");
                        s.write(b);
                        s.close();
                        // System.out.println("Hello World");
                         }
                        }

          2.fileinputStream-->
            Transfer data from perticular file to java application.

             FileInputStream fis = new FileInputStream("f1.txt");
              int size = fis.available();
              System.out.println(size);
              byte b[] = new byte[size];
              fis.read(b);//--> Converting data from fileinputstream to byte array.
              String str = new String(b);
              System.out.println(str);
              
              Note--> If file is not found then Exception java.io.FileNotFoundException;


    5.Collections
    6.Properties file.
    7.Throws and try-catch-finally---------------------------------------------------------------------->
       Exception is runtime error, abnormal termination of application.


1.JDBC
J2EE------->
2.Servlets
3.JSPs
4.JSTL
5.EL





