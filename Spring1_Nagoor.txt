Spring1>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
 1.Core module
 2.AOP
 3.JDBC/DAO
 4.ORM(object-relational mapping)
 5.Tx(Transaction)
 6.Web and web MVC
 7.Security

Tools--> Eclipse, STS
         Oracle, MySQL
         Tomcat, WebLogic, JBOSS or Wildfly, Glassfish

1.Introduction
   What is the need of frameworks?
    >to prepare and simplify enterprise application.
     Enterprise: It is a business organization, It is a group of organization running under single label.
     Enterprise application: It is a software application design for an enterprise, 
     It will simplify internal business processing.
    

For any enterprise application we need to provide three layers.
 1.Presentation layer / User interface layer------> 1.Starting point to access our application.
                                                    2.Login pages, It will look and feel to the enterprise application.
                                                    3.It will take data from user inorder to submit to enterprise appli.
                                                    4.Data validation(ex. date,time syntax check.)
                                                      data validation-->Client side(validate on client mac.-->check id and p/w typed or not), server side(After login check data is valid or not.)
                                                    In client side validation , need to use Javascript functions.
                                                    In server side we need java validation java code is sufficient, by validation api.
                                                    5.To send different types of request submit from client to server, http--7
                                                      get(default),host,had,options,put,tress, delete
                                                    6. Presentation logic-->AWT,Swing,java Fx, HTML, JSP, Struts, JSF....
                                                    ----------------------------------------------------------------


 2.Business processing layer----------------------> Main part(Heart) of the enterprise application.
                                                    1.It can be used to define and execute all business rules and regulations which clients exactly required.
                                                    Manage functionalities.
                                                    2.To prepare this layer, we have to use separate logic , called as business logic.
                                                    3.To prepare business logic, we have to use set of tech like Java beans,Servlets,EJBs, Spring framework ...
                                                    ----------------------------------------------------------------


 3.Data storage and access layer / Persistance layer> 1.It is last layer in enterprise appli. development(Bottomost)
                                                      2.It's main intention is to interact with database and perform db operations as per business rules and regulations.

                                                      3. To prepare this layer, we use separate logic called persistence logic.
                                                      4. JDBC,JPA,Toplink, Hibernate, EJBs-Entity beans,....
                                                    ----------------------------------------------------------------


To distribute this layers, in the single machine or multiple machines we have to use system architecture.
SYSTEM ARCHITECTURE:------->
1. 1-tier architecture
2.2-type architecture
2.3-tier
........n-tier architecture.

1. 1-tier architecture
      In this architecture , we will provide all the enterprise appli.layers in a single machine.
    Drawbacks-- We must prepare the complete enterprise appli. in single machine.
               1.It is highly recommended for standalone applications.
               2.Only one user can use at one time. not for distributed or enterprise appli.
               All 3 layers must be managed by single machine.
               Single machine resources may not be sufficient to execute enterprise appli.
               3.It is providing single user environment.
               4.not providing db sharability and component sharability.
               5.IT IS PROVIDING TIGHTLY COUPLED ARCHITECTURE.


2. 2-type architecture
              Tier-1 machine--> UI Layer, Business processing layer

              Tier-2 machine-->Data storage and access layer

              ADV--> Burden shared, Pepformance increase.
                     Loosely coupled desigh compared to 1-tier 
                     Recommended for enterprise appli.

              For enterprise appli. this architecture is conventional or minimum.
              Complete enterprise appli. in two machines.

              Ex. Client server architecture.
              
              Disadv--> Not providing clear cut separation between presentation layer and DB layer.
                        Little bit tightly coupled.
                        Providing db sharability but not component sharability.
                        Still single user environment.
                        Not suitable for standalone appli.
                        Maintanance cost will increase, because of 2 machine.


3. 3-tier architecture
             Tier-1---> UI layer/Presentation logic
             Tier-2---> Business prosessing layer/business logic
             Tier-3---> Data storage and access layer/persistance logic

             ADV--> Flexibility
                    Loosely coupled because distribute over multiple machines
                    Component sharability, db sharability
                    Multi user envirinment.

5.n-tier architecture.

-----------------------------------------------------------------------------------------------------------------

Types of enterprise application.
                        Java
1.Standalone appli.   
Without any client-server architecture, made on single machine.                
 1.CUI   -->cmd.   
 2.GUI Appli.-->After in cmd javac add.java and java add.java, GUI open .


2.Enterprise application(distributed appli.)
  Design java application with client-server architecture.
  

  1.Web application--> Client server application.
    Application logic will be distributed at server machine Only.
    client is fixed-->browser, server--java code

  2.Distributed appli.
   Complete applicationlogic will be dustributed over both client mahine and server machine.
   client is not fixed--java code, GUI appli with action perform method,JSP, framework appli like struts, JSF/// server--java code

In enterprise appli we need both layers.

browser(client)------------>server(Servlet(controlling perpose))-------------->EJB(business logic)
               <-----------                                     <--------------
               (web appli)                                    (Distributed appli)

For web application,
  we have to use separate technologies called web technologies.
    ex. CGI,Servlets,jsp,jstl, EL..
For distributed application
    ex.Socket programming,RMI, EJBs,corba,Web Services..........

Main purpose of both
   1.Web application-- to generate dynamic response from the server
   2.Distributed appli-- to establish communication between local machine and remote machine and to generate remote services from remote machine.

Two types of server available
 1.Web server---only for web applications. 
 2.Appl server---for web as well as distributed application.ex.JBOSS, Glassfish,WebLogic, tomcat upto v5.

 Web applications are execuetd by both web servers and Application servers.
 Distributed applications are execueted by only application servers.

 Middleware services--> JTA(Java Transaction API), JMS(Java main API), required for web application, not for distribute.

 
 WEB Appli--is the collection of web components like servlets,JSPs.. which executed by the web containers like servlet container, jsp container

 Distributed Appli.--is the collection of EJB components, which are executed by EJB container.

To prepare web application, SUN microsystem has given two design models.
 1.Model-1 architecture(MVC-1)
    Client-server architecture.
    JSP act as view,controller, Java bean act as model part.(Older architecture)

    called JSP front Arch. or
           Page centric arch(Centric component is JSP).

    So, no clear cut separation between view and controller. so tightly COUPLED.
    
 2.Model-2 architecture(MVC-2)
    Servlet act as controller.

    >It is pure MVC implementation.
    >client                         server                                        database
      req.------------>controller-servlet         
                           |         |
                           |        Model--Java beans,jdbc,Hibernate,EJBs<---------------->DB
                           |            |                          
       resp<-----------view-Set of JSP Pages

    >Servlet is the centric component.
    >So, servlet centric architecture.
    >Clear cut separation between view and controller.
    >Some frameworks like struts, JSF,XWORKS2,.. are designed on the basis of model-@ web application arch. only.
  

MVC architecture and it's rules and regulations.->>>>>>>>>>>>>>>>>>>>>>>
 
1. In MVC based appli , controller must be servlet, a set of JSP pages must be View part.
2. In MVC based web appli , only one controller must be provided.
3.In MVC based web appli, Every req. must be provided to controller and all response must be generated by view part.
4.In MVC based web appli, controller and view part are not responsible to interact with databases, they may interact with
  database through model component only.
5. In MVC based web appli, controller is responsible to set data to model component, view part is responsible to get data
   from model component.
6.In MVC based web appli, we can write any number of JSP pages as view part but we must provide all these JSP pages
  as java code less(without java code).
  Java code is for processing, but JSP pages are for presentation.
7.In MVC based web appli, we can provide any number of JSP provide, where we must not provide page-to-page communication.
  where we must provide page-controller-page communication.

Que.. What is the requirement to use frameworks?
 To simplify project.
 To replace boiler code.
 reusability concept. 

 Ans. 
