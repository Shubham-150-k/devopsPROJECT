OOP-->  Module-1
1.Data hiding
2.Abstraction
3.Encapsulation
4.Tightly encapsulated class



5.Is a relationship--Inheritance
6.Has-a relationship--
7.Method signature
8.Overloading---poly
9.Overriding----poly

10.Static control flow
11.Instance control flow
12.Constructor

13.Coupling--->Advance OOP features, for framework
14.Cohetion---> Advance OOP features, for framework

15. Typecasting


1>>>>>>>>>>>>>>>>>>Data hiding>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>.

>>Outside person can't access our internal data directly, our internal data should not go out directly.
this OOP feature is nothing but data hiding.
after authorization and validation person can access our internal data.

Ex. After providing proper username and password, we can able to access our gmail inbox information.
EX. Even though we are valid customer of the bank , we can able to access our account information, we csn't access other's access information.

How we can achieve data hiding?
By declaring data member as a private , we can achieve data hiding.

public class account{
    private double balance;  //Outsider can't access

    public double getBalance()
    {
        #validation //after validation outsider can access our internal data.

        return balance;
    }
}

Biggest Advantage-- Security.
It is highly Recommended to declare datamember as (modifier) private.

2>>>>>>>>>>>>>>>>>>>Abstraction>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

highlight services(which we are offering) not internal implementation.

Hiding internal implementation and just a highlight the set of services what we are offering is the concept of Abstraction.

ex. atm services on GUI(withdraw, deposit, check balance, mini statement)

The main advantages of abstraction are 
1. We can achieve Security because we are not highlighting our internal implementation.
2.without affecting Outside person, ww can able to perform any type changes in out internal system, enhance Enhancement 
will become easy.

3.It Improves Maintainability of the application.

4.It Improves easiness to yse our system.

Concept---by using GUI(interfaces) and abstract classes we can implement abstraction.


3>>>>>>>>>>>>>>>>>>>Encapsulation>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

The process of binding data and corresponding methods into a single unit called as Encapsulation.
Every java class is the example of Encapsulation.

ex. class student{
    data members
         +
    methods(behaviour)
}

If any component follows data hiding and the abstraction such type of component is said to be encapsulated component.

Encapsulation=Data hiding + Abstraction;

ex. public class Account{
    private double balance;

    public double getBalance()
    {
        #validation
        return balance;
    }

    public void setBalance(double balance)
    {
        #validate
        this.balance=balance;
    }
}

Data hiding---------private member;
Abstraction---------GUI screen for bank services.

advantages of Encapsulation are:
1.We can achieve Security.
2. Enhancement will become easy.
3. It improves Maintainability of the application.

The main advantage of Encapsulation is we can achieve Security but the main disadvantage of Encapsulation is
it increases length of the code and slow shutdown execution.










Spring>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Spring is a framework.

Without framework development time like 5 min..
With framework development time like 2 min.

>>>>>>>>>>framework types--2
            1.Web framework---for web application development
            >truts
            >JSF
            >Swarm
             
            2.application framework---for web and distributed application
            Spring framework
    -Spring is advance framework, which have all features of the frameworks.
    -Spring framework is the modulerized framework(number of modules available)


1.Core module(Basic foundation of Spring framework)
    It mainly focus on IOC containers, beans lifecycle(how to create)
    Entire framework is build on top of core module.

     >>Two type of containers in core module.
     1. Bean factory
     2. Application context

2.JDBC/DAO(Data Access Object) Module
   To interact with the database.

    Reason for Spring JDBC---> In any mode jdbc code is same but diffenr part is only for query .
 ex. 1.Load and register driver.
       Class.forName("oracle.jdbc.OracleDriver");
     2.Establish connection between java app and database.
       Connection con= DriverManager.getConnection("jdbc:oracle:thin:@localhost:1521:xe","id","password");
     3.Create either statement or preparedStatement or callableStatement;
        statement st=con.createStatement();
     4.Write and execute SQL queries
       ResultSet rs=st.executeQuery("select * from emp");
       int rowcount=st.executeUpdate("insert into employees values (------------)");

     5.
       rs.close();
       st.close();
       con.close();


    In jdbc, for every application step 1,2,3,5 are same, only step 4 is variable...

    Very much common intersection or code is called as Boiler plate code.
    IMP--Spring provided solution for boiler plate code is called as Spring JDBC.

    This code is abstacted by spring framework.

    Spring jdbc module provide jdbctemplate class is provided.

    EX. jdbcTemplate.execute("select * from emp");
    Connection, Driver etc. done internally.

3.Spring ORM Module
    Hibernet work Sections>>>>>
     
     1.Create configuration Object
      configuration cfg= new configuration();
     
     2.Create SessionFactory Object
      SessionFactory sf=cfg.buildSessionFectory();

     3.Create Session Object
      Session s=sf.openSession();
    
     4.Create Transaction Object
      Transaction tx=s.beginTransaction();

     5.Perform database operations
      int k_val=s.save(emp);

     6.tx.commit();

     7.Close the resources:

   >common Sections in Hibernet 1,2,3,4,6,7
    for all applications these Sections are common-->Boiler plate code

    So abstract boiler code from HibernetTemplate class

    Ex. HibernetTemplate.save(emp);

    So Spring ORM is use instead of Hibernet.

4.Spring AOP Module
  (Aspect Oriented Programming)
   
   AOP give points(mapping) , where to call services like authorization method, validation method, transaction method.

   ex. java application
     -------------------
     --------o----------                    Authentication[](service)------->require before m1() and m2()
     -------m1()--------
     -------------------
     --------o----------
     -------m2()--------
     -------------------
     --------o----------
     -------m3()--------                    Transaction[](service)---------->require before m3() and m4()
     -------------------
     --------o----------
     -------m4()--------
     -------------------
     -------------------

5.Spring tx(Transaction) Module
  For every database operations TX is important.
  To provide transaction environment for database operationn,we need TX module.
  
  Ex. In Hibernet
       Begin transaction,end transaction, commit transaction, rollback transaction.

6.Spring Web Module
  It have two parts.
   1. web---providing environment to integrate other framework like strut,jsf.
   2. web MVC-- Spring









NOTE>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
Spring was defined as Interface 21. After name change to Spring.

Spring is the altrnative for EJB(Enterprise Java Beans)<-----> Spring
>EJB makes application heavy weight and tightly coupled.
>Spring makes application light weight and loosely coupled.
>We can reduce cost.(no need to buy services.)

>for large EJB is suitable.

>>>>>>>>>>>>>>>>>>>>>>>
>EJBs having dependencies on application server so----> Heavy weight
>Spring-->Depend on Spring jars which are in JDK only.
<<<<<<<<<<<<<<<<<<<<<<<


NOTE:>>>>>>>>>>>>
Awt--is heavy weight---because it use os libraries(dependent on os)
Swing--is light weight---because it's not depend on os(it uses jdk libraries)
<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<
